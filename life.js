// Generated by CoffeeScript 1.6.3
(function() {
  var Point, Set, World, global;

  Set = (function() {
    function Set() {
      this.items = {};
    }

    Set.prototype.size = function() {
      return Object.keys(this.items).length;
    };

    Set.prototype.add = function(e) {
      this.items[e] = e;
      return this;
    };

    Set.prototype.contains = function(e) {
      return !!this.items[e];
    };

    Set.prototype.reduce = function(f, a) {
      var _this = this;
      return Object.keys(this.items).reduce((function(a, k) {
        return f(a, _this.items[k]);
      }), a);
    };

    Set.prototype.each = function(f) {
      this.reduce((function(_, e) {
        return f(e);
      }));
      return this;
    };

    Set.prototype.filter = function(pred) {
      return this.reduce((function(a, e) {
        if (pred(e)) {
          a.add(e);
        }
        return a;
      }), new Set);
    };

    Set.prototype.addAll = function(es) {
      var _this = this;
      es.each((function(e) {
        return _this.add(e);
      }));
      return this;
    };

    return Set;

  })();

  Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.toString = function() {
      return "" + this.x + ":" + this.y;
    };

    Point.prototype.neighboringOffsets = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];

    Point.prototype.neighbors = function() {
      var _this = this;
      return this.neighboringOffsets.reduce(function(neighbors, _arg) {
        var dx, dy;
        dx = _arg[0], dy = _arg[1];
        return neighbors.add(new Point(_this.x + dx, _this.y + dy));
      }, new Set);
    };

    Point.prototype.neighborsIn = function(points) {
      return this.neighbors().reduce((function(count, n) {
        if (points.contains(n)) {
          return count + 1;
        } else {
          return count;
        }
      }), 0);
    };

    return Point;

  })();

  World = (function() {
    function World() {
      this.pop = new Set;
    }

    World.prototype.size = function() {
      return this.pop.size();
    };

    World.prototype.add = function(p) {
      return this.pop.add(p);
    };

    World.prototype.contains = function(p) {
      return this.pop.contains(p);
    };

    World.prototype.nextGenTestSet = function() {
      return this.pop.reduce((function(s, p) {
        s.add(p);
        return s.addAll(p.neighbors());
      }), new Set);
    };

    World.prototype.advance = function() {
      var _this = this;
      return this.pop = this.nextGenTestSet().filter(function(p) {
        var count;
        count = p.neighborsIn(_this.pop);
        if (_this.contains(p)) {
          return count === 2 || count === 3;
        } else {
          return count === 3;
        }
      });
    };

    return World;

  })();

  global = typeof exports !== "undefined" && exports !== null ? exports : this;

  global.Set = Set;

  global.Point = Point;

  global.World = World;

}).call(this);

/*
//@ sourceMappingURL=life.map
*/
